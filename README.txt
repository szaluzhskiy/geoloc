How to use
  0. Сборка исполняемого jar.
	mvn clean package
	
	Ищем geoloc-1.0.jar
	
  1. Для запуска программы в системных переменной Path должен быть прописан путь до JAVA_HOME
  2. Используемая версия JVM 1.8. 
     Пример: 
	      java -version
			java version "1.8.0_77"
			Java(TM) SE Runtime Environment (build 1.8.0_77-b03)
			Java HotSpot(TM) 64-Bit Server VM (build 25.77-b03, mixed mode)
  3. Программа имеет 2 режима работы: 
		1. Генерация текстовых файлов с географической сеткой
			java -jar geoloc-1.0.jar gen
		2. Основной режим работы.
			java -jar geoloc-1.0.jar <geo network filename> <geo labels filename>
			Пример:
				java -jar geoloc-1.0.jar geoNetSmall.csv geoUserLabels.csv
				
REST интерфейсы
	1. Создать пользователя
		URI: /geoloc/user
		Method: PUT
		Body:
		{
			"user_id": 1000002,
			"lon": 1.11,
			"lat": 2.12	
		}
		Response: 
			"OK" - пользователь создан
			"NOK" - пользователь не создан. Т.е он уже существует. 
					Валидация полей не выполняется, например, если в поле значение "lon" : "Foo". Будет ошибка не валидации, а RunTimeException. 
	2. Удалить пользователя
		URI: /geoloc/user/{user_id}
		Method: DELETE
		Body:
			Нет тела.
		Response: 
			"OK" - пользователь обновлен.
			"NOK" - пользователь не удален. Т.е он не существует. 
	3. Обновить пользователя
		URI: /geoloc/user
		Method: POST
		Body:
			{
			"user_id": 1,
			"lon": 1.11,
			"lat": 2.12	
		}
		Response: 
			"OK" - пользователь обновлен.
			"NOK" - пользователь не обновлен. Т.е он не существует. 
			
	4. Получить местоположение пользователя
		URI: /geoloc/user/{userId}
		Method: GET
		Body:
			нет тела.
		Response: 
			- "User location is inside cell. Cell coordinates x=1;y=2" - пользователь находится в ячейке с координатами (1;2), при этом он "рядом с меткой", т.е внутри зоны погрешности. .
			- "User location is outside of distance error. Cell coordinates x=1;y=2" - пользователь находится в ячейке с координатами (1;2), при этом он "вдали от метки", т.е вне зоны погрешности. 
			- "User not found" - пользователь не найден.
			
	5. Статистика по ячейке решетки.
		URI: /geoloc/cell/x={?}&y={?}
		Method: GET
		Body:
			нет тела.
		Response: 
			- "X" - число пользователей в ячейке Х, Y.
			
Описание сервиса:
	Cервис предоставляет возможности загрузки географической сетки и меток из файлов в встроенную(in-memory) Базу данных. 
	Сервис имеет набор REST интерфейсов для работы с загруженными метками пользователей. 
	После запуска сервис доступен по адресу - http://127.0.0.1:8088/geoloc
	Перечень функций предосталяемых через REST, ограничен командами описанными в разделе выше - REST интерфейсы.
	Географическая сетка реализована в предположении о том что проекция имеет вид Сферической Маркарторовой проекции. Алгоритм пересчета градусов меток пользователей в метры взят на ресурсе - https://wiki.openstreetmap.org/wiki/Mercator
	
Технические решения:
    Стек используемых компонент: Spring-core, Spring-MVC, Jackson, Hibernate, HSQL DB (in memory), Grizzly

	Областью применения подобного функционала, имеется ввиду скорее подход к реализации, может быть приложение построенное на так называемой микросервисной архитектуре.
	Т.е данный гео-сервис будет предоставлять ограниченный набор функционала при этом будет в свою очередь также по REST взаимодествовать с другими сервисами по REST через backend
	
	Одним из интересных моментов в релизации сервиса является функционал статистики количества пользователей в узле географической сетки. Т.к по заданию не предусматривалось явного наличия индекса, 
	то ввел исскуственный индекс в таблице "метки пользователей", который хранит title_x и title_y - координаты ячейки сетки пользователя.
	
Улучшения и производительность:
   - Все приложение передать в управление в Spring. Сейчас такой базовый момент как HTTP порт сервиса задан значением переменной внутри запускающего класса.
   - Servlet контейнер должен быть внешним.
   - Хранилище данных необходимо расчитать с учетом объема данных о пользователях и с учетом скорости возврата данных сервисом пользователю. Конечно HSQL DB хорош только для прототипа.
   - Конверторы пересчета градусов в метры сделать подключемыми через механизм плагинов.
   - Необходимо вводить слой DTO, для гибкого преобразования данных JSON - Java Pojo.
   - Для каждого REST метода необходимо сформировать списки допустимых=позитивных и недопустимых=негативных(отправляемых в случае бизнес ошибки или исключения) HTTP кодов.
   - Добавить логирование запросов ответов.
   - Производительность по запросам
            - Создание\обновление пользователей - по сути это операции insert\update, если нет большого кол-ва индектов ил триггеров на таблицах, запросы будут быстрыми
			- Удаление пользователей - операция delete по user_id, это поле первичный ключ, проиндексированный. Операция выполнятеся быстро.
			- Статистика пользователей - операция работает за log(n), т.к есть индекс по geolabel title_x title_y.
   
   


